package main

import (
	"fmt"
	"strings"
)

/*
К каким негативным последствиям может привести данный фрагмент кода, и как
это исправить? Приведите корректный пример реализации.

var justString string

func someFunc() {
    v := createHugeString(1 << 10)
    justString = v[:100]
}

func main() {
    someFunc()
}
*/

/*
Проблема данного кода в том, что мы не можем достоверно оценить его работу из-за отсутствия реализации
функции createHugeString(int) string. Предположительно, эта функция возвращает большую по содержанию символов
строку (1024 символов), содержимое которой в значительной степени зависит от выбора решения в коде использовать
один из вариантов копирования части строки. Мы видим, что выбран вариант копирования строки с использованием
кода v[:100], который работает с типом string как со срезом байт и при копировании берёт первые 100 байт. Такой выбор
оправдан при наличии в строке символов, размер которых не превышает 1 байта. В противном случае возникнет проблема,
которая будет отображена далее. Вторая проблема заключается в том, что при таком копировании в памяти будет находиться
строка источник, на часть которой ссылается переменная новой строки. Итого, 1024 символов = 1024 байт,
1024 байт - 100 байт = 924 байт, то есть 924 байт будет постоянно в памяти. При этом глобальная переменная justString
может находиться в памяти значительное время, если код будет модифицирован соответствующим образом, следовательно,
в памяти будет храниться неиспользуемые 924 байт.

Предположим, что функция createHugeString возвращает строку, состоящую только из символов санскрита ("क्षि"). Один символ
занимает 12 байт. При копировании строки через v[:100] мы ожидаем получить 100 символов, но в данном случае
получим только 8 и некорректный девятый символ.
*/

var justString string

func someFunc() {
	v := createHugeString(1 << 10)
	justString = v[:100]

	fmt.Println("\nКол-во символов в строке из функции createHugeString(int) string:", strings.Count(v, "क्षि"))
}

func createHugeString(symbolCount int) string {
	var stringBuilder strings.Builder

	for i := 0; i < symbolCount; i++ {
		stringBuilder.WriteString("क्षि")
	}

	return stringBuilder.String()
}

func main() {
	someFunc()

	fmt.Println("Кол-во символов в переменной justString после копирования:", strings.Count(justString, "क्षि"))
}

/*
Кол-во символов в строке из функции createHugeString(int) string: 1024
Кол-во символов в переменной justString после копирования: 8
*/
